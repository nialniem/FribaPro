package friba.test;
// Generated by ComTest BEGIN
import friba.*;
import kanta.SailoException;

import java.io.File;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2022.05.11 19:29:47 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KierroksetTest {


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa57 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa57() throws SailoException,CloneNotSupportedException {    // Kierrokset: 57
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros kier1 = new Kierros(), kier2 = new Kierros(); 
    kier1.rekisteroi(); kier2.rekisteroi(); 
    assertEquals("From: Kierrokset line: 63", 0, kierrokset.getLkm()); 
    kierrokset.korvaaTaiLisaa(kier1); assertEquals("From: Kierrokset line: 64", 1, kierrokset.getLkm()); 
    kierrokset.korvaaTaiLisaa(kier2); assertEquals("From: Kierrokset line: 65", 2, kierrokset.getLkm()); 
    Kierros kier3 = kier1.clone(); 
    kier3.aseta(2,"kkk"); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista88 
   * @throws SailoException when error
   */
  @Test
  public void testPoista88() throws SailoException {    // Kierrokset: 88
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros pitsi21 = new Kierros(); pitsi21.vastaaLaajisFrisbee(2); 
    Kierros pitsi11 = new Kierros(); pitsi11.vastaaLaajisFrisbee(1); 
    Kierros pitsi22 = new Kierros(); pitsi22.vastaaLaajisFrisbee(2); 
    Kierros pitsi12 = new Kierros(); pitsi12.vastaaLaajisFrisbee(1); 
    Kierros pitsi23 = new Kierros(); pitsi23.vastaaLaajisFrisbee(2); 
    kierrokset.lisaa(pitsi21); 
    kierrokset.lisaa(pitsi11); 
    kierrokset.lisaa(pitsi22); 
    kierrokset.lisaa(pitsi12); 
    assertEquals("From: Kierrokset line: 101", false, kierrokset.poista(pitsi23)); assertEquals("From: Kierrokset line: 101", 4, kierrokset.getLkm()); 
    assertEquals("From: Kierrokset line: 102", true, kierrokset.poista(pitsi11)); assertEquals("From: Kierrokset line: 102", 3, kierrokset.getLkm()); 
    List<Kierros> h = kierrokset.annaKierrokset(1); 
    assertEquals("From: Kierrokset line: 104", 1, h.size()); 
    assertEquals("From: Kierrokset line: 105", pitsi12, h.get(0)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaPelaajanKierrokset120 */
  @Test
  public void testPoistaPelaajanKierrokset120() {    // Kierrokset: 120
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros pitsi21 = new Kierros(); pitsi21.vastaaLaajisFrisbee(2); 
    Kierros pitsi11 = new Kierros(); pitsi11.vastaaLaajisFrisbee(1); 
    Kierros pitsi22 = new Kierros(); pitsi22.vastaaLaajisFrisbee(2); 
    Kierros pitsi12 = new Kierros(); pitsi12.vastaaLaajisFrisbee(1); 
    Kierros pitsi23 = new Kierros(); pitsi23.vastaaLaajisFrisbee(2); 
    kierrokset.lisaa(pitsi21); 
    kierrokset.lisaa(pitsi11); 
    kierrokset.lisaa(pitsi22); 
    kierrokset.lisaa(pitsi12); 
    kierrokset.lisaa(pitsi23); 
    assertEquals("From: Kierrokset line: 132", 3, kierrokset.poistaPelaajanKierrokset(2)); assertEquals("From: Kierrokset line: 132", 2, kierrokset.getLkm()); 
    assertEquals("From: Kierrokset line: 133", 0, kierrokset.poistaPelaajanKierrokset(3)); assertEquals("From: Kierrokset line: 133", 2, kierrokset.getLkm()); 
    List<Kierros> k = kierrokset.annaKierrokset(2); 
    assertEquals("From: Kierrokset line: 135", 0, k.size()); 
    k = kierrokset.annaKierrokset(1); 
    assertEquals("From: Kierrokset line: 137", pitsi11, k.get(0)); 
    assertEquals("From: Kierrokset line: 138", pitsi12, k.get(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaKierrokset220 */
  @Test
  public void testAnnaKierrokset220() {    // Kierrokset: 220
    Kierrokset kierrokset = new Kierrokset(); 
    Kierros round21 = new Kierros(2); kierrokset.lisaa(round21); 
    Kierros round11 = new Kierros(1); kierrokset.lisaa(round11); 
    Kierros round22 = new Kierros(2); kierrokset.lisaa(round22); 
    Kierros round12 = new Kierros(1); kierrokset.lisaa(round12); 
    Kierros round23 = new Kierros(2); kierrokset.lisaa(round23); 
    Kierros round51 = new Kierros(5); kierrokset.lisaa(round51); 
    List<Kierros> loytyneet; 
    loytyneet = kierrokset.annaKierrokset(3); 
    assertEquals("From: Kierrokset line: 233", 0, loytyneet.size()); 
    loytyneet = kierrokset.annaKierrokset(1); 
    assertEquals("From: Kierrokset line: 235", 2, loytyneet.size()); 
    assertEquals("From: Kierrokset line: 236", true, loytyneet.get(0) == round11); 
    assertEquals("From: Kierrokset line: 237", true, loytyneet.get(1) == round12); 
    loytyneet = kierrokset.annaKierrokset(5); 
    assertEquals("From: Kierrokset line: 239", 1, loytyneet.size()); 
    assertEquals("From: Kierrokset line: 240", true, loytyneet.get(0) == round51); 
  } // Generated by ComTest END
}